local Library = {
    Version = "2.0.0",
    Creator = "Guilhermekkgv",
    LastUpdated = "2025-04-13 18:31:12",
    IsLoaded = false,
    Theme = {
        Primary = Color3.fromRGB(32, 33, 36),
        Secondary = Color3.fromRGB(48, 49, 54),
        Accent = Color3.fromRGB(86, 98, 246),
        Text = Color3.fromRGB(235, 235, 235),
        SubText = Color3.fromRGB(165, 165, 165),
        Success = Color3.fromRGB(72, 199, 142),
        Warning = Color3.fromRGB(255, 184, 57),
        Error = Color3.fromRGB(239, 68, 68),
        Hover = Color3.fromRGB(55, 57, 63),
        Selected = Color3.fromRGB(65, 67, 73)
    },
    Font = {
        Regular = Enum.Font.GothamMedium,
        Bold = Enum.Font.GothamBold,
        SemiBold = Enum.Font.GothamSemibold
    }
}

local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local function Create(className, properties)
    local instance = Instance.new(className)
    for k, v in pairs(properties or {}) do
        if k ~= "Parent" then
            instance[k] = v
        end
    end
    if properties.Parent then
        instance.Parent = properties.Parent
    end
    return instance
end

local function Tween(instance, properties, duration)
    local tween = TweenService:Create(instance, TweenInfo.new(duration or 0.3, Enum.EasingStyle.Quart), properties)
    tween:Play()
    return tween
end

function Library.Create(config)
    if Library.IsLoaded then return end
    Library.IsLoaded = true

    local GUI = Create("ScreenGui", {
        Name = "LinuxUI",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })

    if syn and syn.protect_gui then
        syn.protect_gui(GUI)
        GUI.Parent = CoreGui
    elseif gethui then
        GUI.Parent = gethui()
    else
        GUI.Parent = CoreGui
    end

    local Main = Create("Frame", {
        Name = "Main",
        BackgroundColor3 = Library.Theme.Primary,
        Position = UDim2.new(0.5, -275, 0.5, -172),
        Size = UDim2.new(0, 550, 0, 345),
        Parent = GUI
    })

    Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = Main
    })

    local Container = Create("Frame", {
        Name = "Container",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 40),
        Size = UDim2.new(1, 0, 1, -40),
        Parent = Main
    })

    local Header = Create("Frame", {
        Name = "Header",
        BackgroundColor3 = Library.Theme.Secondary,
        Size = UDim2.new(1, 0, 0, 40),
        Parent = Main
    })

    Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = Header
    })

    local Title = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0, 0),
        Size = UDim2.new(1, -30, 1, 0),
        Font = Library.Font.Bold,
        Text = config.Name or "Linux Hub",
        TextColor3 = Library.Theme.Text,
        TextSize = 18,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Header
    })

    local TabHolder = Create("Frame", {
        Name = "TabHolder",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(0, config.TabWidth or 125, 1, 0),
        Parent = Container
    })

    local TabContainer = Create("Frame", {
        Name = "TabContainer",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, config.TabWidth or 125, 0, 0),
        Size = UDim2.new(1, -(config.TabWidth or 125), 1, 0),
        Parent = Container
    })

    local UI = {
        GUI = GUI,
        Main = Main,
        Tabs = {}
    }

    function UI.Tab(tabConfig)
        local tab = {}
        local tabButton = Create("TextButton", {
            Name = "TabButton",
            BackgroundColor3 = Library.Theme.Secondary,
            Size = UDim2.new(1, -20, 0, 32),
            Font = Library.Font.Regular,
            Text = tabConfig.Name,
            TextColor3 = Library.Theme.Text,
            TextSize = 14,
            Parent = TabHolder
        })

        Create("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = tabButton
        })

        local tabContent = Create("ScrollingFrame", {
            Name = "TabContent",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 10),
            Size = UDim2.new(1, -20, 1, -20),
            ScrollBarThickness = 2,
            ScrollBarImageColor3 = Library.Theme.Accent,
            Visible = false,
            Parent = TabContainer
        })

        Create("UIListLayout", {
            Padding = UDim.new(0, 5),
            Parent = tabContent
        })

        function tab.Button(buttonConfig)
            local button = Create("TextButton", {
                Name = "Button",
                BackgroundColor3 = Library.Theme.Secondary,
                Size = UDim2.new(1, 0, 0, 32),
                Font = Library.Font.Regular,
                Text = buttonConfig.Name,
                TextColor3 = Library.Theme.Text,
                TextSize = 14,
                Parent = tabContent
            })

            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = button
            })

            button.MouseButton1Click:Connect(function()
                if buttonConfig.Callback then
                    buttonConfig.Callback()
                end
            end)

            return button
        end

        function tab.Toggle(toggleConfig)
            local toggle = Create("Frame", {
                Name = "Toggle",
                BackgroundColor3 = Library.Theme.Secondary,
                Size = UDim2.new(1, 0, 0, 32),
                Parent = tabContent
            })

            local button = Create("TextButton", {
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 1, 0),
                Font = Library.Font.Regular,
                Text = toggleConfig.Name,
                TextColor3 = Library.Theme.Text,
                TextSize = 14,
                Parent = toggle
            })

            local indicator = Create("Frame", {
                Name = "Indicator",
                BackgroundColor3 = Library.Theme.Error,
                Position = UDim2.new(1, -42, 0.5, -8),
                Size = UDim2.new(0, 32, 0, 16),
                Parent = toggle
            })

            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = indicator
            })

            local enabled = toggleConfig.Default or false

            local function updateToggle()
                Tween(indicator, {
                    BackgroundColor3 = enabled and Library.Theme.Success or Library.Theme.Error
                })

                if toggleConfig.Callback then
                    toggleConfig.Callback(enabled)
                end
            end

            button.MouseButton1Click:Connect(function()
                enabled = not enabled
                updateToggle()
            end)

            updateToggle()
            return toggle
        end

        function tab.Slider(sliderConfig)
            local slider = Create("Frame", {
                Name = "Slider",
                BackgroundColor3 = Library.Theme.Secondary,
                Size = UDim2.new(1, 0, 0, 50),
                Parent = tabContent
            })

            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = slider
            })

            local title = Create("TextLabel", {
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -20, 0, 25),
                Font = Library.Font.Regular,
                Text = sliderConfig.Name,
                TextColor3 = Library.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = slider
            })

            local valueLabel = Create("TextLabel", {
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -60, 0, 0),
                Size = UDim2.new(0, 50, 0, 25),
                Font = Library.Font.Regular,
                Text = tostring(sliderConfig.Default or sliderConfig.Min),
                TextColor3 = Library.Theme.SubText,
                TextSize = 14,
                Parent = slider
            })

            local sliderBar = Create("Frame", {
                BackgroundColor3 = Library.Theme.Primary,
                Position = UDim2.new(0, 10, 0, 35),
                Size = UDim2.new(1, -20, 0, 4),
                Parent = slider
            })

            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = sliderBar
            })

            local fill = Create("Frame", {
                BackgroundColor3 = Library.Theme.Accent,
                Size = UDim2.new(0, 0, 1, 0),
                Parent = sliderBar
            })

            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = fill
            })

            local function update(input)
                local pos = UDim2.new(math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1), 0, 1, 0)
                fill.Size = pos

                local value = math.floor(sliderConfig.Min + ((sliderConfig.Max - sliderConfig.Min) * pos.X.Scale))
                valueLabel.Text = tostring(value)

                if sliderConfig.Callback then
                    sliderConfig.Callback(value)
                end
            end

            local dragging = false
            sliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                end
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    update(input)
                end
            end)

            return slider
        end

        function tab.Dropdown(dropConfig)
            local dropdown = Create("Frame", {
                Name = "Dropdown",
                BackgroundColor3 = Library.Theme.Secondary,
                Size = UDim2.new(1, 0, 0, 32),
                Parent = tabContent
            })

            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = dropdown
            })

            local selected = dropConfig.Default or dropConfig.Options[1]
            local open = false

            local button = Create("TextButton", {
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 1, 0),
                Font = Library.Font.Regular,
                Text = dropConfig.Name .. ": " .. selected,
                TextColor3 = Library.Theme.Text,
                TextSize = 14,
                Parent = dropdown
            })

            local optionsFrame = Create("Frame", {
                Name = "Options",
                BackgroundColor3 = Library.Theme.Secondary,
                Position = UDim2.new(0, 0, 1, 5),
                Size = UDim2.new(1, 0, 0, 0),
                ClipsDescendants = true,
                Visible = false,
                Parent = dropdown
            })

            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = optionsFrame
            })

            local optionsList = Create("UIListLayout", {
                Parent = optionsFrame
            })

            button.MouseButton1Click:Connect(function()
                open = not open
                if open then
                    optionsFrame.Visible = true
                    Tween(optionsFrame, {
                        Size = UDim2.new(1, 0, 0, #dropConfig.Options * 32)
                    })
                else
                    Tween(optionsFrame, {
                        Size = UDim2.new(1, 0, 0, 0)
                    }).Completed:Wait()
                    optionsFrame.Visible = false
                end
            end)

            for _, option in ipairs(dropConfig.Options) do
                local optionButton = Create("TextButton", {
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 32),
                    Font = Library.Font.Regular,
                    Text = option,
                    TextColor3 = Library.Theme.Text,
                    TextSize = 14,
                    Parent = optionsFrame
                })

                optionButton.MouseButton1Click:Connect(function()
                    selected = option
                    button.Text = dropConfig.Name .. ": " .. selected
                    if dropConfig.Callback then
                        dropConfig.Callback(selected)
                    end
                    open = false
                    Tween(optionsFrame, {
                        Size = UDim2.new(1, 0, 0, 0)
                    }).Completed:Wait()
                    optionsFrame.Visible = false
                end)
            end

            return dropdown
        end

        return tab
    end

    function UI:Notify(notifyConfig)
        local notification = Create("Frame", {
            Name = "Notification",
            BackgroundColor3 = Library.Theme.Secondary,
            Position = UDim2.new(1, 20, 1, -90),
            Size = UDim2.new(0, 300, 0, 80),
            Parent = GUI
        })

        Create("UICorner", {
            CornerRadius = UDim.new(0, 8),
            Parent = notification
        })

        Create("TextLabel", {
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 10),
            Size = UDim2.new(1, -30, 0, 20),
            Font = Library.Font.Bold,
            Text = notifyConfig.Title,
            TextColor3 = Library.Theme.Text,
            TextSize = 16,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = notification
        })

        Create("TextLabel", {
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 35),
            Size = UDim2.new(1, -30, 0, 35),
            Font = Library.Font.Regular,
            Text = notifyConfig.Content,
            TextColor3 = Library.Theme.SubText,
            TextSize = 14,
            TextWrapped = true,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = notification
        })

        Tween(notification, {
            Position = UDim2.new(1, -320, 1, -90)
        })

        task.delay(notifyConfig.Duration or 3, function()
            Tween(notification, {
                Position = UDim2.new(1, 20, 1, -90)
            }).Completed:Wait()
            notification:Destroy()
        end)
    end

    return UI
end

return Library